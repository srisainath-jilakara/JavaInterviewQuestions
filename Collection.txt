
Collection Api--

Hierarchy-->Collection(Interface)->List(Interface, list Interface extends Collection)-> ArrayList(Class , ArrayList Implements List Interface)

Use Arrays when you know the size - Arrays are faster compared to ArrayList

Generics:

Collection<Integer> values = new ArrayList<Integer>();-> Integer generic ...by default Object dataType;

1.7 feature -- no need to mention dataType on rightSide (new ArrayList<>());

Set Interface -- HashSet is the Class which implements Set interface.

Set<Integer> nums =  new HashSet<>();

Set doesnt contains duplicates . List may contain duplicates.

Order in which elements are accessed is random.

TreeSet -- Sorted format
Set<Integer> set = new TreeSet<>();

Map is an Interface -- HashMap Implements map interface.

HashTable also implements Map Inteface.

Generics -- TypeSafety is achieved

List<Integer> list =  new ArrayList<>();(Only integer type).

Class Container<T extends Number>--Can pass only Subclasses Of Number (Integer,Double and float etc).

Collection is the Root Interface.

Two ways of looping through the collection
1. Iterator
2. Enhanced For loop.
Collection has an Iterator method.

Iterator i = values.iterator();
i.next();(Iterator is an Interface....... values.iterator - gives iterator object. )
 
While(i.hasNext())--checks if there exists an element.

for(Object i:values)
  System.out.println(i);

List Interface --  two add methods -- add(e) & add(i,e)---I is the index where you want to insert the element.

Use Collection for simple elements. Sort Cannot be used as it doesnt maintain indexing.

Use List for sorting as  it maintains indexing.

List<Integer> arr = new ArrayList<>();

values.forEach(System.out::println)--Stream API & Lambda Expression.

Vector -- Implements List. capacity() - method.


Vector --- Increases size by 100%
ArrayList increases size by 50% 

Therefore for memory management user ArrayList.

Vector -- ThreadSafe

ArrayList -- Not threadSafe ..
Since Vector is threadSafe it is slow. ArrayList is Faster.

LinkedList vs ArrayList--

LinkedList -- Implements List Interface. 
LinkedList is faster when an element needs to be added in middle,
as we have to change prev & next of two elements

Search is faster in ArrayList.

Comparator -- Interface // method compare(int o1,int o2)-->
 if(o1>o2)return 1(Exchange bits) 

To Modilfy Sorting change Create a class Which implements Compartor Interface and
Override the logic in Compare method.

Working of HashMap
•	HashMap is part of Java Collection Framework which uses a technique called Hashing. It implements Map Interface and stores the data in pair of Key and Value.
•	It uses an array and Linked list data structure internally for storing Key and value.
Structure of HashMap node
Class Node<K, V> {
	Int Hash;
	K key;
	V value;
	Node <K, V> next;
}
•	Equals (): It checks the equality of two objects. It compares the Key, whether they are equal or not. It can be overridden and if you override this method, you also need to override hashCode()  
•	hashCode (): This is the method of Object class. It returns the memory reference of Object in integer form and the value received from this function is used as the bucket number.
a.	hashCode of null is always ‘0’
•	Buckets: Array of the node is called buckets. Each node has a data structure like a LinkedList. More than one node can share the same bucket. It may be different in capacity.
Calculating Index:
•	Index minimizes the size of the array. The Formula for calculating the index is:
a.	Index = hashCode (Key)&(n-1) [n is the size of the array]
Hash Collision:
•	This is the case when the calculated index value is the same for two or more Keys. Let's calculate the hash code for another Key "Sunny." Suppose the hash code for "Sunny" is 63281940. To store the Key in the memory, we have to calculate index by using the index formula.
a.	Index=63281940 & (16-1) = 4
•	The value 4 is the computed index value where the Key will be stored in HashMap. In this case, equals () method check that both Keys are equal or not. If Keys are same, replace the value with the current value. Otherwise, connect this node object to the existing node object through the LinkedList. Hence both Keys will be stored at index 4.



