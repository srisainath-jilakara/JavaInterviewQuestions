Data encapsulation and Abstraction and their importance

•	Encapsulation: Defined as wrapping of data under a single unit, mechanism which binds the code and the data it manipulates.
•	It is a protective shield that prevents data from being accessed by the code outside this shield
•	Encapsulation can be achieved by Declaring all the variables in the class as private and writing public methods in the class to set and get the values of variables.


•	Abstraction: It is the property by virtue of which only the essential details are displayed to the user, the trivial and non-trivial details are hidden

•	Can also be defined as process of identifying only the required characteristics of an object and ignoring the irrelevant details

•	The main purpose of abstraction is hiding the unnecessary details from the users. Abstraction is selecting data from a larger pool to show only relevant details of the object to the user. It helps in reducing programming complexity and efforts

Can we DECLARE A CONSTRUCTOR TO BE PRIVATE?

We can declare a constructor as private. If we declare a constructor as private then we won’t be able to create an object of the class. We can use this private constructor in Singleton Design Pattern
Conditions for Private Constructor
•	A private constructor does not allow a class to be subclassed.
•	A private constructor does not allow to create an object outside the class.
•	If all the constant methods are there in our class, we can use a private constructor.
•	If all the methods are static then we can use a private constructor.
•	If we try to extend a class which is having private constructor compile time error will occur.
